import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.licenser'
    id 'net.minecraftforge.gradleutils' version '2.5.1'
    id 'com.gradle.plugin-publish' version '1.3.1'
    id 'com.gradleup.shadow' version '8.3.6'
}

final projectDisplayName = 'Forge Licenser'
description = 'A simple license header manager for Gradle - Fork of org.cadixdev.licenser'
group = 'net.minecraftforge'
version = gitversion.tagOffset

println "Version: $version"
apply from: 'build_shared.gradle'
apply from: 'build_test.gradle'

license {
    include '**/*.java'
    include '**/*.groovy'
}

javadoc.enabled = false
groovydoc.use = true

// javadocJar is created after evaluation, so we need to configure it here
afterEvaluate {
    tasks.named('javadocJar', Jar) {
        dependsOn tasks.named('groovydoc', Groovydoc)
        from groovydoc.destinationDir
    }
}

gradlePlugin {
    website = gitversion.url
    vcsUrl = gitversion.url + '.git'

    plugins {
        licenser {
            id = 'net.minecraftforge.licenser'
            implementationClass = 'net.minecraftforge.licenser.Licenser'
            displayName = projectDisplayName
            description = project.description
            tags = ['license']
        }
    }
}

jar {
    archiveClassifier = 'thin'
}

tasks.named('shadowJar', ShadowJar) {
    enableRelocation = true
    archiveClassifier = null
    relocationPrefix = 'net.minecraftforge.licenser.shadow'
    relocate 'org.cadixdev.gradle.licenser', 'net.minecraftforge.licenser'
}

publishing {
    publications.register('pluginMaven', MavenPublication) {
        pom { pom ->
            artifactId = project.name
            name = projectDisplayName
            description = project.description

            gradleutils.pom.gitHubDetails = pom

            license gradleutils.pom.licenses.MIT
        }
    }

    repositories {
        // TODO [Licenser] Use publishing Forge maven?
        maven {
            name = 'localFolder'
            url = 'file://' + file('build/repo').absolutePath
        }
    }
}

idea.module { downloadSources = downloadJavadoc = true }
