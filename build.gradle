import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.gradle.api.plugins.jvm.JvmTestSuite

plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'jvm-test-suite'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.licenser' version '1.1.1'
    id 'net.minecraftforge.gradleutils' version '2.5.1'
    id 'com.gradle.plugin-publish' version '1.3.1'
    id 'com.gradleup.shadow' version '8.3.6'
}

final projectDisplayName = 'Forge Licenser'
description = 'A simple license header manager for Gradle - Fork of org.cadixdev.licenser'
group = 'net.minecraftforge'
version = gitversion.tagOffset

println "Version: $version"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

repositories {
    gradlePluginPortal()
}

license {
    include '**/*.java'
    include '**/*.groovy'
}

javadoc.enabled = false
groovydoc.use = true

// javadocJar is created after evaluation, so we need to configure it here
afterEvaluate {
    tasks.named('javadocJar', Jar) {
        dependsOn tasks.named('groovydoc', Groovydoc)
        from groovydoc.destinationDir
    }
}

testing {
    suites.configureEach { JvmTestSuite suite ->
        suite.dependencies {
            implementation.add project()
            implementation.add gradleTestKit()
            libs.bundles.spock.get().forEach { dependency ->
                implementation.add dependency
            }
        }

        suite.useJUnitJupiter(libs.junit.get().version)

        suite.targets.configureEach {
            testTask.configure {
                shouldRunAfter test
            }
        }
    }

    suites.named('test', JvmTestSuite)
    suites.register('functionalTest', JvmTestSuite)
}

gradlePlugin {
    testSourceSets sourceSets.functionalTest

    website = gitversion.url
    vcsUrl = gitversion.url + '.git'

    plugins.register('licenser') {
        id = 'net.minecraftforge.licenser'
        implementationClass = 'net.minecraftforge.licenser.Licenser'
        displayName = projectDisplayName
        description = project.description
        tags = ['license']
    }
}

tasks.named('jar', Jar) {
    archiveClassifier = 'thin'
}

tasks.named('shadowJar', ShadowJar) {
    enableRelocation = true
    archiveClassifier = null
    relocationPrefix = 'net.minecraftforge.licenser.shadow'
}

publishing {
    publications.register('pluginMaven', MavenPublication) {
        pom { pom ->
            artifactId = project.name
            name = projectDisplayName
            description = project.description

            gradleutils.pom.gitHubDetails = pom

            license gradleutils.pom.licenses.MIT
        }
    }

    repositories {
        // TODO [Licenser] Use publishing Forge maven?
        maven {
            name = 'localFolder'
            url = 'file://' + file('build/repo').absolutePath
        }
    }
}

idea.module { downloadSources = downloadJavadoc = true }
